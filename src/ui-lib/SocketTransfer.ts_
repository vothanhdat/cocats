class SocketQueryTranfer {
    /**
     * 
     * @param {SocketIOClient.Socket} socket 
     * @param {String} prefix 
     */
    constructor(socket,prefix){
        this.socket = socket
        this.prefix = prefix;
        this.penddingQuery = {}

        this.socket.on(prefix + '_result',this._onQueryResult.bind(this))
        this.socket.on(prefix + '_result_error',this._onQueryResult.bind(this))
        
    }
    query(path,query){
        const uniqueId = Math.random();
        this.socket.emit(this.prefix,uniqueId,query)
        return new Promise((resolve,reject) => {
            this.penddingQuery[uniqueId] = {resolve,reject};
        })
    }

    _onQueryResult(path,id,data){
        if(this.penddingQuery[id]){
            this.penddingQuery[id].resolve(data)
            this.penddingQuery[id] = undefined
        }else{
            throw new Error(`The query ${path} didn't called before`);
        }
    }
    _onQueryError(path,id,error){
        if(this.penddingQuery[id]){
            this.penddingQuery[id].reject(error)
            this.penddingQuery[id] = undefined
        }else{
            throw new Error(`The query ${path} didn't called before`);
        }
    }
}

export default SocketQueryTranfer